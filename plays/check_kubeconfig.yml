---

# Check if KUBECONFIG is present

- name: "Read KUBECONFIG path from env vars"
  set_fact:
    kubeconfig_path: "{{ lookup('env','KUBECONFIG') }}"
  when: kubeconfig_path is not defined

- name: "Check if KUBECONFIG exists"
  stat:
    path: "{{ kubeconfig_path }}"
  register: kubeconfig

- name: "Fail if kubeconfig NOT found"
  fail:
    msg: "kubeconfig not found at {{ kubeconfig_path }}"
  when: not kubeconfig.stat.exists

# Install ocp clients when NOT present

- name: "Check if oc executable is present"
  command: "which oc"
  register: oc_result
  ignore_errors: true
  changed_when: oc_result.rc != 0

- name: "Check if opm executable is present"
  command: "which opm"
  register: opm_result
  ignore_errors: true
  changed_when: opm_result.rc != 0

- name: "Download and install missing clients"
  block:

    - name: "Create client lists when not present"
      set_fact:
        client_list: "{{ (['openshift-client'] if oc_result.rc != 0 else []) + ['opm'] if opm_result.rc != 0 else [] }}"
        bin_client_list: "{{ (['oc'] if oc_result.rc != 0 else []) + ['opm'] if opm_result.rc != 0 else [] }}"

    - name: "Untar clients when not present"
      unarchive:
        src: "{{ ocp_clients_url }}/{{ item }}-linux.tar.gz"
        dest: "/tmp"
        remote_src: true
      loop: "{{ client_list }}"

    - name: "Copy clients to /usr/local/bin/"
      copy:
        src: "/tmp/{{ item }}"
        dest: "/usr/local/bin/"
        mode: u=rwx,g=rx,o=rx
      become: true
      loop: "{{ bin_client_list }}"

  when: ocp_clients_url is defined and (oc_result.rc != 0 or opm_result.rc != 0)

- name: "Configure clients PATH"
  set_fact:
    oc_tool_path: "{{ oc_result.stdout if oc_result.rc == 0 else '/usr/local/bin/oc' }}"
    opm_tool_path: "{{ opm_result.stdout if opm_result.rc == 0 else '/usr/local/bin/opm' }}"

# get OCP version and set dci_topic

- name: Get oc version output
  command: "{{ oc_tool_path }} --kubeconfig {{ kubeconfig_path }} version"
  register: oc_version_str

- name: Get OCP version
  set_fact:
    ocp_version_full: "{{ item.split(':')[1].strip() }}"
    ocp_version: "{{ '.'.join(item.split(':')[1].strip().split('.')[0:2]) }}"
    ocp_version_maj: "{{ item.split(':')[1].strip().split('.')[0] }}"
    ocp_version_min: "{{ item.split(':')[1].strip().split('.')[1] }}"
    ocp_version_patch: "{{ item.split(':')[1].strip().split('.')[2] }}"
  when: "'Server Version' in item"
  loop: "{{ oc_version_str.stdout_lines }}"

- name: Fail if the ocp version is not set
  fail:
    msg: "OCP version is not set"
  when: not ocp_version

- name: "Set dci_topic"
  set_fact:
    dci_topic: "OCP-{{ ocp_version }}"

# get OCP cluster name

- name: "Get cluster name"
  command: "{{ oc_tool_path }} --kubeconfig {{ kubeconfig_path }} config view -o jsonpath='{.clusters[0].name}'"
  register: cluster_name_cmd

- name: "Set cluster_name variable"
  set_fact:
    cluster_name: "{{ cluster_name_cmd.stdout }}"

...
