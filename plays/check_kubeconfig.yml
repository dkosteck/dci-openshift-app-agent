---

# Check if KUBECONFIG is present

- name: "Read KUBECONFIG path from env vars"
  set_fact:
    kubeconfig_path: "{{ lookup('env','KUBECONFIG') }}"
  when: kubeconfig_path is not defined

- name: "Check if KUBECONFIG exists"
  stat:
    path: "{{ kubeconfig_path }}"
  register: kubeconfig

- name: "Fail if kubeconfig NOT found"
  fail:
    msg: "kubeconfig not found at {{ kubeconfig_path }}"
  when: not kubeconfig.stat.exists

- name: "Temp directory for initial OC client"
  tempfile:
    state: directory
    prefix: dci_app_agent.
  register: app_agent_dir

- name: "Download latest oc client, overridden later"
  unarchive:
    src: "{{ ocp_clients_url }}/latest/openshift-client-linux.tar.gz"
    dest: "{{ app_agent_dir.path }}"
    remote_src: true
    mode: 0755

# get OCP version and set dci_topic
- name: "Get oc version output"
  command: "{{ app_agent_dir.path }}/oc --kubeconfig {{ kubeconfig_path }} version"
  register: oc_version_str

# get OCP cluster name
- name: "Get cluster name"
  command: "{{ app_agent_dir.path }}/oc --kubeconfig {{ kubeconfig_path }} config view -o jsonpath='{.clusters[0].name}'"
  register: cluster_name_cmd

- name: "Set cluster_name variable"
  set_fact:
    cluster_name: "{{ cluster_name_cmd.stdout }}"

- name: "Remove App Agent working directory"
  file:
    path: "{{ app_agent_dir.path }}"
    state: absent

- name: "Set facts for OCP version"
  set_fact:
    ocp_version_full: "{{ item.split(':')[1].strip() }}"
    ocp_version: "{{ '.'.join(item.split(':')[1].strip().split('.')[0:2]) }}"
    ocp_version_maj: "{{ item.split(':')[1].strip().split('.')[0] }}"
    ocp_version_min: "{{ item.split(':')[1].strip().split('.')[1] }}"
    ocp_version_patch: "{{ item.split(':')[1].strip().split('.')[2] }}"
  when: "'Server Version' in item"
  loop: "{{ oc_version_str.stdout_lines }}"

- name: "Fail if the ocp version is not set"
  fail:
    msg: "OCP version is not set"
  when: not ocp_version

- name: "Set dci_topic"
  set_fact:
    dci_topic: "OCP-{{ ocp_version }}"

# get ocp component

- name: Get the ocp component id filename
  set_fact:
    ocp_comp_path: "/tmp/{{ cluster_name }}.ocp_prod_id"
  when:
    - ocp_component_id is not defined
    - ocp_comp_path is not defined

- name: Test ocp component id filename
  stat:
    path: "{{ ocp_comp_path }}"
  register: ocp_comp_file
  when:
    - ocp_comp_path is defined

- name: Get the ocp component id from file content
  set_fact:
    ocp_component_id: "{{ lookup('file', ocp_comp_path) }}"
  when:
    - ocp_component_id is not defined
    - ocp_comp_file is defined
    - ocp_comp_file.stat.exists

- name: Lookup ocp component from oc version
  block:

    - name: Find the corresponding ocp topic
      dci_topic:
        state: search
        name: "{{ dci_topic }}"
      register: dci_topics
      tags: [dci]
      ignore_errors: true

    - name: Find the corresponding ocp components
      dci_component:
        name: "{{ ocp_version_full }}"
        topic_id: "{{ dci_topics.topics[0].id }}"
        type: ocp
        state: search
      when:
        - "dci_topics is defined"
        - "dci_topics.topics|length >= 1"
      register: ocp_components
      tags: [dci]
      ignore_errors: true

    - name: get ocp component from previous job
      set_fact:
        ocp_component_id: "{{ ocp_components.components[0].id }}"
      when:
        - "ocp_components is defined"
        - "'components' in ocp_components"
        - "ocp_components.components|length == 1"
        - "'id' in ocp_components.components[0]"
      tags: [dci]

  when: "ocp_component_id is not defined"

- name: Display ocp_component_id
  debug:
    msg: "{{ ocp_component_id }}"
  when: "ocp_component_id is defined"

- name: "Fail if unable to find ocp_component_id"
  fail:
    msg: "Unable to find the DCI component corresponding to the version of OCP {{ ocp_version_full }}"
  when: ocp_component_id is not defined

- name: "Check if OC is is already cached"
  stat:
    path: "{{ provision_cache_store }}/{{ ocp_version_full }}/client_tools.done"
  register: client_tools

- name: "Proper clients versions download"
  block:

    - name: "Create the client tools cache directory"
      file:
        path: "{{ provision_cache_store }}/{{ ocp_version_full }}"
        state: directory
        mode: '0755'

    # Download clients according cluster version
    - name: "Untar OCP clients"
      unarchive:
        src: "{{ ocp_clients_url }}/{{ ocp_version_full }}/{{ client_name }}-linux.tar.gz"
        dest: "{{ provision_cache_store }}/{{ ocp_version_full }}"
        remote_src: true
        mode: 0755
      loop: "{{ ocp_clients }}"
      loop_control:
        loop_var: client_name
      when:
        - ocp_clients is defined

    - name: "Marker for client tools downloaded"
      file:
        dest: "{{ provision_cache_store }}/{{ ocp_version_full }}/client_tools.done"
        state: touch
        mode: "0644"

  when: not client_tools.stat.exists

- name: "Set client paths"
  set_fact:
    oc_tool_path: "{{ provision_cache_store }}/{{ ocp_version_full }}/oc"
    opm_tool_path: "{{ provision_cache_store }}/{{ ocp_version_full }}/opm"

...
